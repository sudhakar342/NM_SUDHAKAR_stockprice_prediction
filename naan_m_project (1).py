# -*- coding: utf-8 -*-
"""NAAN M project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14p6csmu82UsbzhldlLVFVhzvILmlhPsK
"""

!pip install yfinance matplotlib seaborn scikit-learn tensorflow

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
import math
import warnings
warnings.filterwarnings('ignore')


data = pd.read_csv('AAPL_sample_stock_data.csv', index_col='Date', parse_dates=True)
data = data[['Close']]
data.dropna(inplace=True)


if not data.empty:
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)
else:
    raise ValueError("Dataset is empty. Please check your CSV file.")


training_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:training_size]
test_data = scaled_data[training_size:]

def create_dataset(dataset, time_step=60):
    X, y = [], []
    for i in range(time_step, len(dataset)):
        X.append(dataset[i - time_step:i, 0])
        y.append(dataset[i, 0])
    return np.array(X), np.array(y)

X_train, y_train = create_dataset(train_data)
X_test, y_test = create_dataset(test_data)


X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)


model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    Dropout(0.2),
    LSTM(50, return_sequences=False),
    Dropout(0.2),
    Dense(25),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.summary()


history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))


predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))


rmse = math.sqrt(mean_squared_error(y_test_actual, predictions))
print(f"Root Mean Squared Error: {rmse:.2f}")


plt.figure(figsize=(12, 6))
plt.plot(y_test_actual, label='Actual Price')
plt.plot(predictions, label='Predicted Price')
plt.title('Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()

"""Dataset Description"""

import pandas as pd

df = pd.read_csv("/content/AAPL_sample_stock_data.csv")
print(df.head())

"""Data Preprocessing

"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler


df = pd.read_csv("AAPL_sample_stock_data.csv")

scaler = MinMaxScaler()

scaled_data = scaler.fit_transform(df[['Close']])


comparison_df = pd.DataFrame({
    'Original Close': df['Close'],
    'Scaled Close': scaled_data.flatten()
})


print(comparison_df.head())

"""Exploratory Data Analysis (EDA)"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


df = pd.read_csv("AAPL_sample_stock_data.csv")


df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

"""Histogram

"""

plt.figure(figsize=(8, 4))
df['Close'].hist(bins=50)
plt.title('Close Price Distribution')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

"""Boxplot"""

plt.figure(figsize=(8, 2))
sns.boxplot(x=df['Close'], color='skyblue')
plt.title('Close Price Boxplot')
plt.xlabel('Price')
plt.grid(True)
plt.show()

"""Line Plot (Trend Analysis):"""

plt.figure(figsize=(12, 6))
df['Close'].plot()
plt.title('Stock Close Price Over Time')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.grid(True)
plt.show()

"""Heatmap"""

corr = df.corr()
plt.figure(figsize=(5, 3))
sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap')
plt.show()

"""8.	FeatureEngineering"""

df['MA7'] = df['Close'].rolling(window=7).mean()
df['MA14'] = df['Close'].rolling(window=14).mean()
df['Daily_Return'] = df['Close'].pct_change()
df['Lag_1'] = df['Close'].shift(1)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[['Close']])

"""model training

"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler

# Load your dataset
df = pd.read_csv('AAPL_sample_stock_data.csv')
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

# Use only 'Close' for univariate LSTM
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[['Close']])

import numpy as np

sequence_length = 60
X = []
y = []

for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i-sequence_length:i, 0])
    y.append(scaled_data[i, 0])

X, y = np.array(X), np.array(y)


X = np.reshape(X, (X.shape[0], X.shape[1], 1))

train_size = int(len(X) * 0.8)
X_train = X[:train_size]
y_train = y[:train_size]
X_test = X[train_size:]
y_test = y[train_size:]

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense


model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(LSTM(units=50))
model.add(Dense(1))


model.compile(optimizer='adam', loss='mean_squared_error')


history = model.fit(X_train, y_train, epochs=20, batch_size=32)

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

import matplotlib.pyplot as plt

plt.plot(history.history['loss'], label='Training Loss')
plt.title('LSTM Training Loss Over Epochs')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()

"""10.	Model Evaluation"""

predicted = model.predict(X_test)

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

# Assuming y_test and predicted are scaled values; inverse transform if needed
predicted_prices = scaler.inverse_transform(predicted.reshape(-1, 1))
actual_prices = scaler.inverse_transform(y_test.reshape(-1, 1))

rmse = np.sqrt(mean_squared_error(actual_prices, predicted_prices))
mae = mean_absolute_error(actual_prices, predicted_prices)
r2 = r2_score(actual_prices, predicted_prices)

print(f"RMSE: {rmse}")
print(f"MAE: {mae}")
print(f"R2 Score: {r2}")

import matplotlib.pyplot as plt

plt.figure(figsize=(12,6))
plt.plot(actual_prices, label='Actual Price')
plt.plot(predicted_prices, label='Predicted Price')
plt.title('Actual vs Predicted Stock Prices')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()

errors = actual_prices - predicted_prices
plt.hist(errors, bins=50)
plt.title('Distribution of Prediction Errors')
plt.xlabel('Error')
plt.ylabel('Frequency')
plt.show()